{"version":3,"sources":["questionControllers.js"],"names":["questions","req","res","questionToUpdate","meetupQuestions","find","c","id","parseInt","params","status","send","error","votes","meetup","title","body","data","questionToDownVote","validateRecords","details","message","newQuestion","length","createdOn","format","createdBy","push","user","records","schema","Joi","string","min","required","validate"],"mappings":"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","file":"questionControllers.js","sourceRoot":"C:/Users/Inclet/Desktop/Challenge/questioner/controllers","sourcesContent":["import meetupQuestions from '../data/meetupQuestions';\r\nimport Joi from 'joi';\r\nimport moment from 'moment';\r\n\r\n\r\nclass questions{\r\n\r\n\tconstructor(){\r\n\r\n\t}\r\n\r\n      static upvoteQuestion(req, res){\r\n\r\n\r\n     \tconst questionToUpdate = meetupQuestions.find( c => c.id === parseInt(req.params.id));\r\n     \t\r\n     \tif(!questionToUpdate)\r\n     \t\treturn res.status(400).send({\r\n     \t\t\tstatus:400,\r\n     \t\t\terror : 'No question with such ID exist, hence No Update can be performed'\r\n     \t\t});\r\n\r\n     \tif(questionToUpdate){\r\n            \r\n            questionToUpdate.votes = questionToUpdate.votes + 1;\r\n            const { meetup, title, body, votes } = questionToUpdate;\r\n\r\n     \t\treturn res.status(201).send({\r\n     \t\t\tstatus : 201,\r\n     \t\t\tdata : [\r\n                    {\r\n                        meetup,\r\n                        title,\r\n                        body,\r\n                        votes\r\n                    }\r\n     \t\t\t]\r\n     \t\t})\r\n     }\r\n\r\n}\r\n\r\n        static downvoteQuestion(req, res){\r\n            \r\n            const questionToDownVote = meetupQuestions.find( c => c.id === parseInt(req.params.id));\r\n        \r\n        if(!questionToDownVote)\r\n            return res.status(400).send({\r\n                status:400,\r\n                error : 'No question with such ID exist, hence No Update can be performed'\r\n            });\r\n\r\n        if(questionToDownVote){\r\n\r\n            questionToDownVote.votes -= 1;\r\n\r\n            const { meetup, title, body, votes } = questionToDownVote;\r\n\r\n            return res.status(201).send({\r\n                status : 201,\r\n                data : [\r\n                {\r\n                    meetup,\r\n                    title,\r\n                    body,\r\n                    votes\r\n                }\r\n                ]\r\n            })\r\n     }\r\n\r\n        }\r\n\r\n\r\n        static createQuestion(req, res){\r\n\r\n        \r\n            const { error } = validateRecords(req.body);\r\n            if(error)\r\n              return res.status(400).send({\r\n                status:400,\r\n                error: error.details[0].message\r\n            });\r\n\r\n            const {title, body} = req.body\r\n\r\n            const newQuestion = {\r\n                   id : parseInt(meetupQuestions.length +1),\r\n                   createdOn : moment().format('LL'),\r\n                   createdBy : 1,\r\n                   meetup : 1,\r\n                   title,\r\n                   body,\r\n                   votes : 0\r\n\r\n            }\r\n\r\n\r\n            meetupQuestions.push(newQuestion);\r\n\r\n\r\n            return res.status(201).send({\r\n                status : 201,\r\n                data : [{\r\n                    user : newQuestion.createdBy,\r\n                    meetup : newQuestion.meetup,\r\n                    title,\r\n                    body\r\n                }]\r\n            })\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nfunction validateRecords(records){\r\n    const schema = {\r\n           title : Joi.string().min(4).required(),\r\n           body: Joi.string().min(4).required(),\r\n          };\r\n\r\n     return Joi.validate(records, schema);\r\n\r\n     }\r\n\r\nexport default questions;\r\n"]}